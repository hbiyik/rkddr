#!/usr/bin/env python3
"""
 Copyright (C) 2025 boogie

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import io
import argparse
import datetime

from pyrkddr import ddrblob
from pyrkddr import common
from pyrkddr import idb
from pyrkddr import tui


def getstorage(filename, revision=True):
    rkdir = os.path.join(os.path.expanduser("~"), ".rkddr")
    os.makedirs(rkdir, exist_ok=True)
    for i, backup in enumerate(sorted([os.path.join(rkdir, x) for x in os.listdir(rkdir)], key=os.path.getmtime, reverse=True)):
        if i < common.MAXBACKUPS - 1:
            continue
        os.remove(backup)
    if revision:
        revision = str(datetime.datetime.now())
        for rep in [" ", "-", ":", "."]:
            revision = revision.replace(rep, "_")
        filename += "_" + revision
    return os.path.join(rkdir, filename)


def openfile(fullpath):
    try:
        return open(fullpath, "rb+")
    except PermissionError:
        print(f"Dont have read+write access to {fullpath}")
    except FileNotFoundError:
        print(f"{fullpath} does not exist")
    except Exception as e:
        print(f"Error {e} happened while openning {fullpath}")


def findblob(buffer):
    f = io.BytesIO(buffer)
    while True:
        if f.read(4) == ddrblob.MAGIC:
            version = int.from_bytes(f.read(4), "little")
            Blob = ddrblob.get(version)
            if not Blob:
                return
            blob = Blob(f, f.tell() - 8)
            return blob


def findidb(f, offset=common.IDBOFFSET):
    f.seek(offset)
    block = f.read(common.BLOCK_SIZE)
    if not idb.IdBlock.checkmagic(block):
        return
    block += f.read(common.BLOCK_SIZE * 3)
    idblock = idb.IdBlock(block)
    idblock.read(f)
    if not idblock.entries:
        return
    return idblock


def showtui(blob, header=""):
    header = f"RKDDR: {header} with ddr blob version {blob.header.version}"
    screen = tui.Screen(blob, header)
    screen.run()


def blobfromidb(handler, offset=common.IDBOFFSET):
    idblock = findidb(handler, offset)
    if not idblock:
        return
    blob = findblob(idblock.entries[0].blob)
    if not blob:
        return
    return idblock, blob


def finddevice(fullpath):
    handler = openfile(fullpath)
    if not handler:
        return
    ret = blobfromidb(handler)
    if not ret:
        return
    idblock, blob = ret
    return handler, idblock, blob


def iterdevices():
    devtypes = ["mtdblock", "mmcblk", "sda", "sdb", "sdc", "sdd"]
    for devtype in devtypes:
        for path in os.listdir("/dev"):
            if path.startswith(devtype) and path.replace(devtype, "").isdigit():
                fullpath = os.path.join("/dev", path)
                ret = finddevice(fullpath)
                if not ret:
                    continue
                yield ret


def updatebuffer(handler, oldbuf, newbuf, offset, backup=True):
    if not newbuf == oldbuf:
        isyes = input("Are you sure you want to save changes [y/N]:")
        if not isyes.lower() == "y":
            print("Changes discarded")
            return
        if backup:
            backup = getstorage("blob")
            with open(backup, "wb") as f:
                f.write(oldbuf)
                print(f"Backup saved at path {backup}")
        handler.seek(offset)
        # some block devices requires zeroing first
        zero = b"\x00" * len(newbuf)
        handler.write(zero)
        handler.seek(offset)
        handler.write(newbuf)
        print("Changes saved")
        return True
    return False


def updateidb(handler, idblock, blob):
    oldidbbuf = idblock.dump()
    idblock.entries[0].blob = blob.header.dumphandler()
    newidbbuf = idblock.dump()
    if updatebuffer(handler, oldidbbuf, newidbbuf, idblock.block * common.BLOCK_SIZE, False):
        backup = getstorage("idb")
        with open(backup, "wb") as f:
            f.write(oldidbbuf)
            print(f"Backup saved at path {backup}")


def main():
    parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')
    parser.add_argument('-d', "--device", help='Work on on the DDR blob inside the found IDB of the given block device')
    parser.add_argument('-i', "--idb", help='Work on on the DDR blob inside the given IDB file')
    parser.add_argument('-b', "--blob", help='Work on on the DDR blob file given')
    args = parser.parse_args()

    handler = None
    if args.device:
        ret = finddevice(args.device)
        if not ret:
            return
        handler, idblock, blob = ret
        showtui(blob, f"TPL from '{handler.name}' at block {idblock.block}")
        updateidb(handler, idblock, blob)
    elif args.idb:
        handler = openfile(args.idb)
        if not handler:
            return
        ret = blobfromidb(handler, 0)
        if not ret:
            return
        idblock, blob = ret
        showtui(blob, f"IDB from '{handler.name}' at block 0")
        updateidb(handler, idblock, blob)
    elif args.blob:
        handler = openfile(args.blob)
        if not handler:
            return
        oldbuf = handler.read()
        blob = findblob(oldbuf)
        if not blob:
            return
        showtui(blob, f"BLOB from '{args.blob}'")
        updatebuffer(handler, oldbuf, blob.header.dumphandler(), 0)
    else:
        for handler, idblock, blob in iterdevices():
            showtui(blob, f"TPL from '{handler.name}' at block {idblock.block}")
            updateidb(handler, idblock, blob)
            break

    if handler:
        handler.close()


if __name__ == "__main__":
    main()
